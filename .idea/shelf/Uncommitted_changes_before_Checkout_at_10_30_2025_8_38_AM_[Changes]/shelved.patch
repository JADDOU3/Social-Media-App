Index: src/main/java/org/example/socialmediaapp/securety/JwtAuthFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.socialmediaapp.securety;\r\n\r\nimport jakarta.servlet.FilterChain;\r\nimport jakarta.servlet.ServletException;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport jakarta.servlet.http.HttpServletResponse;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.example.socialmediaapp.services.JwtService;\r\nimport org.example.socialmediaapp.services.UserService;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport java.io.IOException;\r\n\r\n\r\n@Component\r\n@RequiredArgsConstructor\r\npublic class JwtAuthFilter extends OncePerRequestFilter {\r\n    private final JwtService jwtService;\r\n    private final UserService userService;\r\n\r\n    @Override\r\n    protected void doFilterInternal(\r\n            HttpServletRequest request,\r\n            HttpServletResponse response,\r\n            FilterChain filterChain)\r\n            throws ServletException, IOException {\r\n        final String authorizationHeader = request.getHeader(\"Authorization\");\r\n        if (authorizationHeader == null || !authorizationHeader.startsWith(\"Bearer \")) {\r\n            filterChain.doFilter(request, response);\r\n            return;\r\n        }\r\n        try {\r\n        String token = authorizationHeader.substring(7);\r\n        String email = jwtService.extractUsername(token);\r\n        if (email != null  && SecurityContextHolder.getContext().getAuthentication() == null) {\r\n            var userDetails = userService.loadUserByUsername(email);\r\n            if(jwtService.isTokenValid(token , userDetails)){\r\n                var authToken = new UsernamePasswordAuthenticationToken(\r\n                        userDetails , null , userDetails.getAuthorities()\r\n                );\r\n                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\r\n                SecurityContextHolder.getContext().setAuthentication(authToken);\r\n            }\r\n        }\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        filterChain.doFilter(request, response);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/socialmediaapp/securety/JwtAuthFilter.java b/src/main/java/org/example/socialmediaapp/securety/JwtAuthFilter.java
--- a/src/main/java/org/example/socialmediaapp/securety/JwtAuthFilter.java	(revision 816d1f09061bf20e9f231f34947748befcbc1840)
+++ b/src/main/java/org/example/socialmediaapp/securety/JwtAuthFilter.java	(date 1761806218429)
@@ -5,8 +5,8 @@
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 import lombok.RequiredArgsConstructor;
-import org.example.socialmediaapp.services.JwtService;
 import org.example.socialmediaapp.services.UserService;
+import org.example.socialmediaapp.services.JwtService;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
Index: .idea/dataSources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
new file mode 100644
--- /dev/null	(date 1761560448817)
+++ b/.idea/dataSources.xml	(date 1761560448817)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
+    <data-source source="LOCAL" name="@localhost" uuid="54a8cf47-bf47-4390-9ba7-ded017802833">
+      <driver-ref>mysql.8</driver-ref>
+      <synchronize>true</synchronize>
+      <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>
+      <jdbc-url>jdbc:mysql://localhost:3306</jdbc-url>
+      <jdbc-additional-properties>
+        <property name="com.intellij.clouds.kubernetes.db.host.port" />
+        <property name="com.intellij.clouds.kubernetes.db.enabled" value="false" />
+        <property name="com.intellij.clouds.kubernetes.db.container.port" />
+      </jdbc-additional-properties>
+      <working-dir>$ProjectFileDir$</working-dir>
+    </data-source>
+  </component>
+</project>
\ No newline at end of file
Index: target/classes/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/application.properties b/target/classes/application.properties
new file mode 100644
--- /dev/null	(date 1761805737086)
+++ b/target/classes/application.properties	(date 1761805737086)
@@ -0,0 +1,12 @@
+spring.application.name=Social-Media-App
+
+spring.datasource.url=jdbc:mysql://localHost:3306/SocialMedia
+spring.datasource.username=root
+spring.datasource.password=root
+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
+
+spring.jpa.hibernate.ddl-auto=update
+spring.jpa.show-sql=true
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
+
+jwt.secret=d69a9a1691cba218f8a1e069fc5ef904b7cbb8c92581b04a70e01f7260d88fa3
\ No newline at end of file
